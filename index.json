[{"categories":["Agile"],"contents":"この記事はQiitaに書こうと思っている記事を先行で公開しています。\nドメイン駆動設計も随分と浸透してきたと思うこのごろ。\nでも、未だに動的型付き言語で頑張っている（弊社含め）現場も多く、今回は静的型付き言語について語ろうかと。\nそもそもWebアプリの業界では単純にPHPやRuby、Pythonなど動的片付け言語で頑張る現場が圧倒的に多いかと思います。\nしかし、ドメイン駆動設計を実践していくと、ある事実が襲ってきます。それはドメイン駆動設計は「型」の世界で成り立っているということ。\n実践するにあたって、まず最初に乗り越える壁がレイヤアーキテクチャだったりするので、なかなか難しいと思いますが、 本質的な部分は当然モデル。EntityであったValueObjectであるわけです。\nもちろん、動的型付きの言語でもモデルは書けます。弊社でもPython3の型ヒントを駆使してモデルを書いています。\nただ、モデルとは何かを考えてみていただきたい。\n モデルとは、プロジェクトに携わる人々の頭のなかで構築された概念の集まりであり、ドメインについての洞察を反映した、用語と概念間の関係性からできている。(エリックエヴァンスのドメイン駆動設計 第一部第二章 コミュニケーションと言語の使い方 より)\n プロジェクトに携わる人々の頭のなかで構築された概念の集まり、すなわち、ソフトウェアが扱う領域のビジネスの知識というのが、モデルとして表現されているということです。\nであるならば、当然ビジネスの段階によってモデルは変化するものと考えられると思います。 つまり、モデルは作って終わりではなく、リリース後もずっと変わっていくもの（変わらない＝ビジネスが停滞している）と言えます。\nエヴァンス本の中身が難しいと先に「実践ドメイン駆動設計」を読む人も多いかと思いますが、 この本に欠けているのが、この部分の強調。 エヴァンス本には「第三部 より深い洞察へ向かうリファクタリング」として丸々1部をかけて説明しています。\nで、頻繁にモデルが変わるとなると、必要なのはリファクタリング。 特にクラス名の変更を多く使うことになります。\n実際今自分が携わるプロジェクトも、新しいビジネスモデルを取り入れるにあたり、多くのクラスを変更する必要性が出てきているのですが、Pythonゆえに短時間での対応が難しいという問題に直面しています。 結局後回して、後日時間を取って丁寧に変更していこうという話になっています。。。\n動的型付きの言語はここが弱いところ。 違う型が入ってきても動くし、該当のクラスを使用している箇所を探すのも一苦労です。\nこれが静的型付けであれば、ほぼ一発回答。最近の発達したIDEを使えば楽に変更が効きます。 最悪誤っていればコンパイルが通らないので、テストの実行や検証環境に上げて確認なんてする前に確認ができます。\nそして、静的型付き言語はDIが使いやすいので、きれいにレイヤーアキテクチャを組むことも可能です。\nWebアプリをPHPやRubyで入った方から見ると、敷居が高いと思われる静的型付け言語。 アプリサーバーとか必要ですしね。 しかし、最近はSpringBootに代表されるように、 アプリサーバーもセットになり、コマンド一発で実行環境が作れるフレームワークも多いです。\nそして、サーバーレスにも最近は対応。AWSであれば、LambdaLayersなども登場し、フレームワークの容量の重さも気にする必要がなくなっていますし、Lambdaの起動が遅い問題も解決されつつあります。\nぜひぜひ一度試してみてはいかがでしょう。\n","permalink":"https://pilgrim-lifestyle.jp/blog/%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E9%A7%86%E5%8B%95%E8%A8%AD%E8%A8%88%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E9%9D%99%E7%9A%84%E5%9E%8B%E4%BB%98%E3%81%8D%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%99%E3%81%99%E3%82%81/","tags":["Agile","Scrum"],"title":"ドメイン駆動設計のための静的型付き言語のすすめ"},{"categories":null,"contents":"システムエンジニア\n株式会社 アラタナ所属\nドメイン駆動設計とアジャイルを活用した設計を信条としています。 認定ScrumMaster取得\n","permalink":"https://pilgrim-lifestyle.jp/about/about/","tags":null,"title":"About"},{"categories":["Agile"],"contents":"この記事はQiitaに書いた記事を転載したものです。\n先日、宮崎初のJbugに参加してきました。\nhttps://jbug.connpass.com/event/152790/\n自分も登壇させていてだきましたが、それはまた別で、今回はその懇親会でのお話で面白い話があがったので紹介します。\nある顧客がメールマガジンをしたいと要望したところ、なぜそれをしたいのかがわからないまま適用しようとしているという話から、デザイン界隈でもファッション雑誌なんかも各ページのレイアウトなんかは長い年月をかけて一定の形式が決まっていて、それに沿ってコンテンツを埋めてもなんの効果がない。大事なのはその中身、コンテンツ、つまりWhyが大事なんだとか。\nそれと似たことがAgileやScrumにも言えるんじゃないかと思いました。\n今や、AgileもScrumもアーリーアダプターの段階は超えていて、マジョリティの段階に来ていますよね。 弊社でもScrumのプラクティスを取り入れて毎スプリントを過ごしています。\nしかし、ただやるだけではうまくいくはずもなく、、、もしかしたらうまく行っていないことにも気づけないかもしれません。 逆に何かおかしいと感じるかもしれませんが、何も手を打たなければ、そうしているうちに結局手遅れになり炎上している。。。とういうことも。。。\n定期的にWhyを確認する必要があります。 なぜスプリントでやるのか？なぜポイントで見積もるのか？なぜベロシティを計測するのか？なぜ朝会をするのか？なぜペアプロをするのか？ そもそもなぜその事業をするのか？自分は何をする人なのか？\n実はなぜAgileなのか？Scrumなのか、解説してくれる本ってなかなかないと思います。 もっと言えば、なぜチームでやるのか。。。この点については解説してくれる本にまだ自分も出会っていません。 チームでやればなぜパフォーマンスが上がるのか？そもそもどういう状態だとチームでやってると言えるのか？\n考えるのは自分たち自身。それこそ答えは一つではないと思うのでチームで考える必要があるでしょう。 また、守離破という自分もお気に入りの言葉がありますが、まず「守ってやってみる」のも大事ですが、それには「なぜやるのか」を考えながら守るという意味が含まれていると思っています。\n年の暮れにこんなことを振り返ってみるのはいかがでしょうか？\n","permalink":"https://pilgrim-lifestyle.jp/blog/%E5%9E%8B%E3%81%AB%E3%81%AF%E3%82%81%E3%82%8B%E3%81%A0%E3%81%91%E3%81%A7%E3%81%86%E3%81%BE%E3%81%8F%E3%81%84%E3%81%8F%E3%81%AA%E3%82%93%E3%81%A6%E3%81%93%E3%81%A8%E3%81%AF%E3%81%AA%E3%81%84%E3%81%A8%E3%81%84%E3%81%86%E8%A9%B1/","tags":["Agile","Scrum"],"title":"型にはめるだけでうまくいくなんてことはないという話"}]